"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolutionMetricsCollectorConstruct = void 0;
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
const path = require("path");
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cr = require("aws-cdk-lib/custom-resources");
const constructs_1 = require("constructs");
class SolutionMetricsCollectorConstruct extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const metricsCollectorLambda = new lambda.Function(this, 'MetricsCollectorFunction', {
            description: `${props.solutionDisplayName} (${props.version}): metrics collection function`,
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset(path.resolve(__dirname, './lambda')),
            handler: 'index.handler',
            ...(props.vpc && { vpc: props.vpc }),
            ...(props.vpcSubnets && { vpcSubnets: props.vpcSubnets }),
        });
        const metricsCollectorCrProvider = new cr.Provider(this, 'MetricsCollectorCrProvider', {
            onEventHandler: metricsCollectorLambda,
        });
        const customResource = new aws_cdk_lib_1.CustomResource(this, 'CustomResource', {
            serviceToken: metricsCollectorCrProvider.serviceToken,
            properties: {
                solutionId: props.solutionId,
                solutionVersion: props.version,
                region: cdk.Aws.REGION,
                sendAnonymousMetrics: props.sendAnonymousMetrics,
                ...props.metricsData,
            },
        });
        this.anonymousDataUUID = customResource.getAttString('anonymousDataUUID');
    }
}
exports.SolutionMetricsCollectorConstruct = SolutionMetricsCollectorConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29sdXRpb24tbWV0cmljcy1jb2xsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvc29sdXRpb24tbWV0cmljcy1jb2xsZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7O0VBY0U7QUFDRiw2QkFBNkI7QUFDN0IsbUNBQW1DO0FBQ25DLGlEQUFpRDtBQUNqRCw2Q0FBNkM7QUFDN0MsbURBQW1EO0FBQ25ELDJDQUF1QztBQWF2QyxNQUFhLGlDQUFrQyxTQUFRLHNCQUFTO0lBRzVELFlBQ0ksS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLEtBQTZDO1FBRTdDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQzlDLElBQUksRUFDSiwwQkFBMEIsRUFDMUI7WUFDSSxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEtBQUssS0FBSyxDQUFDLE9BQU8sZ0NBQWdDO1lBQzNGLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ2hFLE9BQU8sRUFBRSxlQUFlO1lBQ3hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNwQyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDNUQsQ0FDSixDQUFDO1FBRUYsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQzlDLElBQUksRUFDSiw0QkFBNEIsRUFDNUI7WUFDSSxjQUFjLEVBQUUsc0JBQXNCO1NBQ3pDLENBQ0osQ0FBQztRQUVGLE1BQU0sY0FBYyxHQUFHLElBQUksNEJBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUU7WUFDOUQsWUFBWSxFQUFFLDBCQUEwQixDQUFDLFlBQVk7WUFDckQsVUFBVSxFQUFFO2dCQUNSLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtnQkFDNUIsZUFBZSxFQUFFLEtBQUssQ0FBQyxPQUFPO2dCQUM5QixNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNO2dCQUN0QixvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CO2dCQUNoRCxHQUFHLEtBQUssQ0FBQyxXQUFXO2FBQ3ZCO1NBQ0osQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUM5RSxDQUFDO0NBQ0o7QUE1Q0QsOEVBNENDIiwic291cmNlc0NvbnRlbnQiOlsiLyogXG4gIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICBcbiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAgWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgXG4gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgXG4gIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IEN1c3RvbVJlc291cmNlIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgY3IgZnJvbSAnYXdzLWNkay1saWIvY3VzdG9tLXJlc291cmNlcyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IElWcGMsIFN1Ym5ldFNlbGVjdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1lYzInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNvbHV0aW9uTWV0cmljc0NvbGxlY3RvckNvbnN0cnVjdFByb3BzIHtcbiAgICBzb2x1dGlvbkRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gICAgc29sdXRpb25JZDogc3RyaW5nO1xuICAgIHZlcnNpb246IHN0cmluZztcbiAgICBzZW5kQW5vbnltb3VzTWV0cmljczogJ1llcycgfCAnTm8nO1xuICAgIHZwYz86IElWcGM7XG4gICAgdnBjU3VibmV0cz86IFN1Ym5ldFNlbGVjdGlvbjtcbiAgICBtZXRyaWNzRGF0YTogeyBba2V5OiBzdHJpbmddOiB1bmtub3duIH07XG59XG5cbmV4cG9ydCBjbGFzcyBTb2x1dGlvbk1ldHJpY3NDb2xsZWN0b3JDb25zdHJ1Y3QgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAgIHB1YmxpYyByZWFkb25seSBhbm9ueW1vdXNEYXRhVVVJRDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgICAgIHByb3BzOiBTb2x1dGlvbk1ldHJpY3NDb2xsZWN0b3JDb25zdHJ1Y3RQcm9wc1xuICAgICkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IG1ldHJpY3NDb2xsZWN0b3JMYW1iZGEgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICdNZXRyaWNzQ29sbGVjdG9yRnVuY3Rpb24nLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgJHtwcm9wcy5zb2x1dGlvbkRpc3BsYXlOYW1lfSAoJHtwcm9wcy52ZXJzaW9ufSk6IG1ldHJpY3MgY29sbGVjdGlvbiBmdW5jdGlvbmAsXG4gICAgICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1gsXG4gICAgICAgICAgICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuL2xhbWJkYScpKSxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gICAgICAgICAgICAgICAgLi4uKHByb3BzLnZwYyAmJiB7IHZwYzogcHJvcHMudnBjIH0pLFxuICAgICAgICAgICAgICAgIC4uLihwcm9wcy52cGNTdWJuZXRzICYmIHsgdnBjU3VibmV0czogcHJvcHMudnBjU3VibmV0cyB9KSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBtZXRyaWNzQ29sbGVjdG9yQ3JQcm92aWRlciA9IG5ldyBjci5Qcm92aWRlcihcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAnTWV0cmljc0NvbGxlY3RvckNyUHJvdmlkZXInLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9uRXZlbnRIYW5kbGVyOiBtZXRyaWNzQ29sbGVjdG9yTGFtYmRhLFxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGN1c3RvbVJlc291cmNlID0gbmV3IEN1c3RvbVJlc291cmNlKHRoaXMsICdDdXN0b21SZXNvdXJjZScsIHtcbiAgICAgICAgICAgIHNlcnZpY2VUb2tlbjogbWV0cmljc0NvbGxlY3RvckNyUHJvdmlkZXIuc2VydmljZVRva2VuLFxuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIHNvbHV0aW9uSWQ6IHByb3BzLnNvbHV0aW9uSWQsXG4gICAgICAgICAgICAgICAgc29sdXRpb25WZXJzaW9uOiBwcm9wcy52ZXJzaW9uLFxuICAgICAgICAgICAgICAgIHJlZ2lvbjogY2RrLkF3cy5SRUdJT04sXG4gICAgICAgICAgICAgICAgc2VuZEFub255bW91c01ldHJpY3M6IHByb3BzLnNlbmRBbm9ueW1vdXNNZXRyaWNzLFxuICAgICAgICAgICAgICAgIC4uLnByb3BzLm1ldHJpY3NEYXRhLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hbm9ueW1vdXNEYXRhVVVJRCA9IGN1c3RvbVJlc291cmNlLmdldEF0dFN0cmluZygnYW5vbnltb3VzRGF0YVVVSUQnKTtcbiAgICB9XG59XG4iXX0=